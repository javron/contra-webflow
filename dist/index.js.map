{"version":3,"sources":["../src/runtime.ts"],"names":["CLOUDINARY_TRANSFORM_PREFIXES","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","limit","template","i","placeholder","loadingEl","emptyEl","initialFilters","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","placeholders","expert","card","fragment","expertCard","repeatContainers","detachedTemplates","container","element","fieldName","format","value","href","mediaType","transformedUrl","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","textElement","url","parent","mediaElement","transformedVideoUrl","transformedImageUrl","urlLower","isVideoExtension","ext","isCloudinaryVideo","originalElement","video","posterUrl","playPromise","fallbackImg","err","img","videoUrl","uploadMarker","parts","baseUrl","path","pathComponents","firstPathComponent","prefix","newTransformations","param","newPath","finalUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","display","loadMoreButton","btn","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","options","optionElement","label","labelMatch","datalistId","datalist","transformations","processedUrl","cleanPath","key","stringValue","params","filterString","urlObject","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n  optimizeGifsAsVideo?: boolean;\n  contraAnalytics?: boolean;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  prerenderPlaceholders: 'prerender-placeholders'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      optimizeGifsAsVideo: true,\n      contraAnalytics: true,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n\n      // Prerender placeholders if requested, before the original template is hidden\n      if (template && listElement.hasAttribute(`${ATTR_PREFIX}${ATTRS.prerenderPlaceholders}`)) {\n        this.log(`Prerendering ${limit} placeholders for list: ${listId}`);\n        for (let i = 0; i < limit; i++) {\n          const placeholder = template.cloneNode(true) as Element;\n          placeholder.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n          placeholder.classList.add('contra-placeholder-item');\n          (placeholder as HTMLElement).style.display = ''; // Ensure placeholder is visible\n          listElement.appendChild(placeholder);\n        }\n      }\n      \n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n    const listId = this.getAttr(listElement, ATTRS.listId)!;\n\n    // Handle prerendered placeholders on initial load\n    const placeholders = this.querySelectorAll(listElement, '.contra-placeholder-item');\n    if (!append && placeholders.length > 0) {\n      this.log(`Populating ${experts.length} of ${placeholders.length} placeholders for list.`);\n      \n      experts.forEach((expert, i) => {\n        const placeholder = placeholders[i];\n        if (placeholder) {\n          this._configureCard(placeholder, expert, listId);\n          placeholder.classList.remove('contra-placeholder-item');\n        }\n      });\n\n      // Remove any unused placeholders\n      if (experts.length < placeholders.length) {\n        this.log(`Removing ${placeholders.length - experts.length} unused placeholders.`);\n        for (let i = experts.length; i < placeholders.length; i++) {\n          placeholders[i].remove();\n        }\n      }\n      this.log(`Finished rendering placeholders for list`, listElement);\n      return; // Skip the standard rendering path\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert, listId);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile, listId: string): Element {\n    const card = template.cloneNode(true) as Element;\n    this._configureCard(card, expert, listId);\n    return card;\n  }\n\n  /**\n   * Configures an existing card element with expert data, including all sub-fields and repeaters.\n   * This is the core rendering logic for a single item.\n   */\n  private _configureCard(card: Element, expert: ExpertProfile, listId: string): void {\n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // --- Fix for repeater template pollution ---\n    // 1. Temporarily detach repeater templates\n    const repeatContainers = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    const detachedTemplates = new Map<Element, DocumentFragment>();\n    repeatContainers.forEach(container => {\n        const fragment = document.createDocumentFragment();\n        while (container.firstChild) {\n            fragment.appendChild(container.firstChild);\n        }\n        detachedTemplates.set(container, fragment);\n    });\n\n    // 2. Populate fields on the main card (now safely without repeater templates)\n    this.populateFields(card, expert, listId);\n    \n    // 3. Re-attach the pristine templates\n    detachedTemplates.forEach((fragment, container) => {\n        container.appendChild(fragment);\n    });\n\n    // 4. Handle repeating elements, which will now use the clean templates\n    this.populateRepeatingElements(card, expert, listId);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile, listId: string): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format, listId);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null, listId?: string): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      let href = String(value);\n      if (listId) {\n          href = this._appendContraAnalytics(href, listId);\n      }\n      element.href = href;\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // If optimizing GIFs as videos, treat them as such immediately.\n    if (this.config.optimizeGifsAsVideo && urlLower.endsWith('.gif')) {\n        return 'video';\n    }\n    \n    // Video formats - check for extensions and Cloudinary video path\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideoExtension = videoExtensions.some(ext => urlLower.endsWith(ext));\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideoExtension || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    // Default to image\n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Set a poster image proactively for better mobile compatibility and UX.\n    const posterUrl = this.extractVideoThumbnail(url);\n    if (posterUrl) {\n      video.poster = posterUrl;\n      this.log(`Set poster for video ${url}: ${posterUrl}`);\n    }\n\n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n      \n      // Programmatically play the video to support mobile autoplay, which often ignores the attribute alone.\n      // The promise is caught to handle cases where the browser blocks autoplay (e.g., Low Power Mode).\n      const playPromise = video.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          this.log('Autoplay was prevented.', { error, videoUrl: url });\n        });\n      }\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Create a fallback image element\n      const fallbackImg = this.createImageElement(posterUrl || url, originalElement);\n      if (video.parentElement) {\n        video.parentElement.replaceChild(fallbackImg, video);\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      // --- Desktop hover events ---\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => { /* Ignore play errors */ });\n        });\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n      \n      // --- Mobile & Desktop click/tap events ---\n      video.addEventListener('click', (e) => {\n        e.preventDefault(); // Prevent navigation if video is in a link\n        if (video.paused) {\n          video.currentTime = 0;\n          video.play().catch((err) => this.log('Video play failed on click', err));\n        } else {\n          video.pause();\n        }\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    // Loosened the check to work for any Cloudinary upload URL\n    if (!videoUrl.includes('/upload/')) {\n        this.log('URL does not appear to be a Cloudinary video, cannot generate poster.', videoUrl);\n    return null;\n    }\n\n    // Always change the file extension to .jpg for the poster\n    let posterUrl = videoUrl.replace(/\\.(mp4|webm|mov|avi|mkv|ogg|gif)$/i, '.jpg');\n\n    const uploadMarker = '/upload/';\n    const parts = posterUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not parse URL for thumbnail generation: ${videoUrl}`);\n        return posterUrl;\n    }\n\n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (!hasTransformations) {\n        this.log(`No Cloudinary transformations found, returning basic .jpg poster URL for: ${videoUrl}`);\n        return posterUrl;\n    }\n\n    let transformations = pathComponents.shift() || '';\n    \n    // Remove params not ideal for a static poster (e.g., flags like fl_progressive)\n    const params = transformations.split(',');\n    const filteredParams = params.filter(param => \n        !param.startsWith('fl_') && \n        param !== 'f_auto'\n    );\n\n    const newTransformations = filteredParams.join(',');\n\n    if (newTransformations) {\n        pathComponents.unshift(newTransformations);\n    }\n\n    const newPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${newPath}`;\n    \n    this.log(`Generated poster URL: ${finalUrl} from video URL: ${videoUrl}`);\n    return finalUrl;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile, listId: string): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems), listId);\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems), listId);\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })), listId);\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[], listId: string): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      // The template pollution is fixed, so we can reliably use populateFields for all item types.\n      this.populateFields(itemElement, item, listId);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    let processedUrl = url;\n    if (mediaType === 'video' && url.toLowerCase().endsWith('.gif')) {\n        processedUrl = url.replace(/\\.gif$/i, '.mp4');\n        this.log(`Converting GIF to MP4: ${processedUrl}`);\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = processedUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${processedUrl}`);\n        return processedUrl;\n    }\n    \n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n        this.log(`Removing existing transformations from URL: ${processedUrl}`);\n        pathComponents.shift();\n    }\n\n    const cleanPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${transformations}/${cleanPath}`;\n    \n    this.log(`Transformed ${mediaType} URL from \"${url}\" to \"${finalUrl}\"`);\n    return finalUrl;\n  }\n\n  private _stringifyFilters(filters: ExpertFilters): string {\n    return Object.entries(filters)\n      .filter(([, value]) => {\n        if (value === null || value === undefined) return false;\n        if (Array.isArray(value) && value.length === 0) return false; // Exclude empty arrays\n        if (typeof value === 'string' && value.trim() === '') return false; // Exclude empty strings\n        // Keep numbers (like 0) and booleans\n        return true;\n      })\n      .map(([key, value]) => {\n        const stringValue = Array.isArray(value) ? value.join(',') : String(value);\n        return `${key}:${stringValue}`;\n      })\n      .join('|');\n  }\n\n  private _appendContraAnalytics(url: string, listId: string): string {\n    if (!this.config.contraAnalytics || !url) {\n      return url;\n    }\n\n    try {\n      // Find the list element in the main document to ensure it's the rendered one\n      const listElement = document.querySelector(`[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n      if (!listElement) return url;\n\n      const programId = this.getAttr(listElement, ATTRS.program);\n      const state = this.state.getState(listId);\n      \n      // We want the *current* filters from the state, which is correct\n      const filters = state.filters;\n\n      const params = new URLSearchParams();\n      params.set('contra_source', 'webflow_sdk');\n      if (programId) params.set('contra_program_id', programId);\n      if (listId) params.set('contra_list_id', listId);\n      \n      const filterString = this._stringifyFilters(filters);\n      if (filterString) {\n        params.set('contra_filters', filterString);\n      }\n\n      // Check if the URL is valid before creating a URL object\n      if (!url.startsWith('http')) {\n        this.log('Cannot append analytics to a relative or invalid URL', { url });\n        return url;\n      }\n\n      const urlObject = new URL(url);\n      \n      params.forEach((value, key) => {\n        // Use set instead of append to avoid duplicate params if logic is ever re-run\n        urlObject.searchParams.set(key, value);\n      });\n\n      return urlObject.toString();\n\n    } catch (error) {\n      this.log('Failed to append Contra analytics to URL.', { url, error });\n      return url; // Return original URL on error\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}